--- 
- hosts: grudge
  become: true


  tasks:
    - name: Update and Upgrade all packages
      apt:
        upgrade: dist
        update_cache: yes

    - name: Ensure all dependency packages are installed
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: true
      vars:
        packages:
        - python3-pip
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg2
        - software-properties-common
        

    - name: Install pip through ansible role
      include_role:
        name: geerlingguy.pip



    - name: Install docker through ansible role
      include_role:
        name: geerlingguy.docker
      vars:
        docker_users:
          - "{{ username }}"

    - name: List available drives
      shell: lsblk -o NAME,SIZE,MOUNTPOINT,MODEL,UUID 
      register: drives_output
      changed_when: false

    - name: Display drives
      debug:
        msg: "{{ drives_output.stdout_lines }}"

    - name: Pause for drive selection
      pause:
        prompt: "Please enter the UUID of the drive to use for backup storage:"
      register: selected_drive

    - name: Create a Mount Point for the backup storage
      file:
        path: /media/vault
        state: directory

    - name: Add the backup storage mountpoint to fstab
      ansible.posix.mount:
        path: /media/vault
        src: UUID="{{ selected_drive.user_input }}"
        fstype: exfat
        opts: defaults,auto,users,rw,nofail
        state: present

    - name: Mount all filesystems mentioned in fstab
      command: mount -a


    - name: Enable automatic security updates
      apt:
        name: unattended-upgrades
        state: latest
        update_cache: yes
        autoremove: yes
        autoclean: yes
        dpkg_options: 'force-confdef'
        only_upgrade: yes


#    - name: Copy local files to remote server
#      copy:
#       src: ./app
 #       dest: /media/vault
  #      mode: 0755
#
 #   - name: Build Docker image
  #    command: cd /media/vault && docker build -t backup-image:latest .
#
 #   - name: Copy service account key
  #    copy:
   #     src: serviceaccount.json
    #    dest: /path/on/docker/host/service_account.json
     #   mode: '0600'

  #  - name: Run the backup container
  #    docker_container:
  #      name: backup-container
   #     image: backup-image:latest
    #    state: started
     #   restart_policy: always
      #  env:
      #    GMAIL_USERNAME: "{{ lookup('env', 'GMAIL_USERNAME') }}"
       #   GMAIL_PASSWORD: "{{ lookup('env', 'GMAIL_PASSWORD') }}"
       #   GMAIL_RECEIVER: "{{ lookup('env', 'GMAIL_RECEIVER') }}"
       #   SERVICE_ACCOUNT_FILE: "/app/service_account.json"
       # volumes:
       #   - "/backups/vault:/app:rw"
          